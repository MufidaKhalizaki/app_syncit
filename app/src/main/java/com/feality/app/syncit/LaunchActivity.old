package com.feality.app.syncit;

import android.app.Activity;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.net.wifi.p2p.WifiP2pDevice;
import android.net.wifi.p2p.WifiP2pDeviceList;
import android.net.wifi.p2p.WifiP2pManager;
import android.os.Bundle;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.TextView;

import java.util.ArrayList;
import java.util.List;


public class LaunchActivityOld extends Activity implements WifiP2pManager.PeerListListener {

    private static final String LOG_TAG = LaunchActivityOld.class.getSimpleName();

    private final IntentFilter mIntentFilter = new IntentFilter();
    private WiFiDirectBroadcastReceiver mReceiver;
    private WifiP2pManager mP2PManager;
    private WifiP2pManager.Channel mChannel;

    private List<WifiP2pDevice> peers = new ArrayList<WifiP2pDevice>();

    public <T> T get(int id, Class<T> clz){
        return clz.cast(findViewById(id));
    }

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.fragment_launch);

        //  Indicates a change in the Wi-Fi P2P status.
        mIntentFilter.addAction(WifiP2pManager.WIFI_P2P_STATE_CHANGED_ACTION);

        // Indicates a change in the list of available peers.
        mIntentFilter.addAction(WifiP2pManager.WIFI_P2P_PEERS_CHANGED_ACTION);

        // Indicates the state of Wi-Fi P2P connectivity has changed.
        mIntentFilter.addAction(WifiP2pManager.WIFI_P2P_CONNECTION_CHANGED_ACTION);

        // Indicates this device's details have changed.
        mIntentFilter.addAction(WifiP2pManager.WIFI_P2P_THIS_DEVICE_CHANGED_ACTION);

        mP2PManager = WifiP2pManager.class.cast(getSystemService(WIFI_P2P_SERVICE));
        mChannel = mP2PManager.initialize(this, getMainLooper(), null);
    }

    /** register the BroadcastReceiver with the intent values to be matched */
    @Override
    public void onResume() {
        super.onResume();
        mReceiver = new WiFiDirectBroadcastReceiver(new WifiP2pStateChangeListener() {
            @Override
            public void setIsWifiP2pEnabled(boolean enabled) {
                int colorResourceId = enabled ? R.color.light_green : R.color.light_grey;
                get(R.id.launch_layout, ViewGroup.class).setBackgroundResource(colorResourceId);
            }
        }, mP2PManager, mChannel, this);
        registerReceiver(mReceiver, mIntentFilter);
    }

    @Override
    public void onPause() {
        super.onPause();
        unregisterReceiver(mReceiver);
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        // Inflate the menu; this adds items to the action bar if it is present.
        getMenuInflater().inflate(R.menu.launch, menu);
        return true;
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        // Handle action bar item clicks here. The action bar will
        // automatically handle clicks on the Home/Up button, so long
        // as you specify a parent activity in AndroidManifest.xml.
        int id = item.getItemId();
        if (id == R.id.action_settings) {
            return true;
        }
        return super.onOptionsItemSelected(item);
    }

    public void onClickConnect(View v){
        mP2PManager.discoverPeers(mChannel, new WifiP2pManager.ActionListener() {

            @Override
            public void onSuccess() {
                // Code for when the discovery initiation is successful goes here.
                // No services have actually been discovered yet, so this method
                // can often be left blank.  Code for peer discovery goes in the
                // onReceive method, detailed below.
                get(R.id.launch_text, TextView.class).setText("Waiting for peers...");
            }

            @Override
            public void onFailure(int reason) {
                // Code for when the discovery initiation fails goes here.
                // Alert the user that something went wrong.
                final TextView textView = get(R.id.launch_text, TextView.class);
                switch (reason) {
                    case WifiP2pManager.P2P_UNSUPPORTED:
                        textView.setText("WIFI peer-to-peer is not supported on your device :(");
                        get(R.id.launch_layout, ViewGroup.class).setBackgroundResource(R.color.light_grey);
                        break;
                    default:
                        textView.setText(String.format("onFailure(%d)", reason));

                }
            }
        });
    }

    @Override
    public void onPeersAvailable(WifiP2pDeviceList peerList) {

        // Out with the old, in with the new.
        peers.clear();
        peers.addAll(peerList.getDeviceList());

        StringBuilder sb = new StringBuilder();
        for (WifiP2pDevice peer : peers) {
            sb.append(peer.deviceName)
                    .append('(')
                    .append(peer.deviceAddress)
                    .append(')')
                    .append('\n');
        }
        get(R.id.launch_text, TextView.class).setText(sb.toString());
        get(R.id.launch_button, Button.class).setText("Continue");
        get(R.id.launch_button, Button.class).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

            }
        });
    }




    public interface WifiP2pStateChangeListener {
        public void setIsWifiP2pEnabled(boolean enabled);
    }

    public static class WiFiDirectBroadcastReceiver extends BroadcastReceiver {
        private final WifiP2pStateChangeListener mStateChangeListener;
        private final WifiP2pManager mWifiP2pManager;
        private final WifiP2pManager.Channel mChannel;

        private final WifiP2pManager.PeerListListener mPeerListListener;

        private WiFiDirectBroadcastReceiver(WifiP2pStateChangeListener mStateChangeListener, WifiP2pManager mWifiP2pManager, WifiP2pManager.Channel mChannel, WifiP2pManager.PeerListListener mPeerListListener) {
            this.mStateChangeListener = mStateChangeListener;
            this.mWifiP2pManager = mWifiP2pManager;
            this.mChannel = mChannel;
            this.mPeerListListener = mPeerListListener;
        }

        @Override
        public void onReceive(Context context, Intent intent) {
            String action = intent.getAction();
            if (WifiP2pManager.WIFI_P2P_STATE_CHANGED_ACTION.equals(action)) {
                // Determine if Wifi P2P mode is enabled or not, alert
                // the Activity.
                int state = intent.getIntExtra(WifiP2pManager.EXTRA_WIFI_STATE, -1);

                if (state == WifiP2pManager.WIFI_P2P_STATE_ENABLED) {
                    mStateChangeListener.setIsWifiP2pEnabled(true);
                } else {
                    mStateChangeListener.setIsWifiP2pEnabled(false);
                }
            } else if (WifiP2pManager.WIFI_P2P_PEERS_CHANGED_ACTION.equals(action)) {

                // Request available peers from the wifi p2p manager. This is an
                // asynchronous call and the calling activity is notified with a
                // callback on PeerListListener.onPeersAvailable()
                if (mWifiP2pManager != null) {
                    mWifiP2pManager.requestPeers(mChannel, mPeerListListener);
                }
                Log.d(LOG_TAG, "P2P peers changed");

            } else if (WifiP2pManager.WIFI_P2P_CONNECTION_CHANGED_ACTION.equals(action)) {

                // Connection state changed!  We should probably do something about
                // that.

            } else if (WifiP2pManager.WIFI_P2P_THIS_DEVICE_CHANGED_ACTION.equals(action)) {


            }
        }
    }

}
